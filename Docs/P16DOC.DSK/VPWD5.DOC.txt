	   15. Оконная подсистемаx0
							  12.10.90

     Оконная  подсистема  обеспечивает	совместно  с   аппаратурой
видеоконтроллера многооконную среду для  программного  обеспечения
ПЭВМ.

     Основные термины:

ПЛОСКОСТЬ (AREA)- область  памяти,  в  которую  выполняется  вывод
графической и текстой информации; с точки зрения задачи  -  обычно
непрерывная    прямоугольная	область    оперативной	   памяти;
характеристиками плоскости являются её длина, ширина, число  битов
на точку (1, 2, 4, 8);

ЭКРАН - физический экран монитора, на который происходит  реальное
отображение информации;

ПОРТ- прямоугольная область экрана; по вертикали задаётся номера-
ми первой и последней видео строки, а по  горизонтали  -  номерами
первой и последней полоски; в запросах к  оконной  системе  номера
видео-строк рекомендуется указывать кратными  4  (это  фактическая
дискретность, используемая оконной системой);

ОКНО- прямоугольный фрагмент плоскости; задаётся  номером  первой
отображаемой строки  и	смещением  в  байтах  относительно  начала
видео-строки  (это  точка  привязки   -   левый   верхний   угол);
недостающие  параметры	определяются   размерами   и   параметрами
масштабирования порта,	в  котором  отображается  данное  окно;  в
запросах  к  оконной  системе  смещение  в  байтах   рекомендуется
задавать кратным четырём байтам (данная дискретность  определяется
аппаратными средствами видео-контроллера;

ВИД (VIEW)- совокупность окна и порта; вид  называется  активным,
т.е. наиболее приоритетным,  если  он  не  "заслоняется"  никакими
другими видами и сам может "заслонять" другие виды;

ПАЛИТРА (PALETTE)- таблица в оперативной памяти, используемая для
задания  компонент  красного  (R),  зелёного  (G)  и  синего   (B)
оттенков, используемых для формирования одного из 65536  возможных
цветов; для каждого из режимов видео-контроллера имеется несколько
независимых палитры; в режиме 1 бит/точку можно  использовать  два
возможных цвета, кодируемых 0  или  1;	палитра  для  обоих  кодов
позволяет назначить любые из 65536 цветов; аналогично для  режимов
2, 4 и 8 бит/точку;

ШРИФТ (FONT) - совокупность структур данных, определяющих форму  и
кодирование букв, цифр,  графических  символов	для  знакоместного
вывода информации на плоскость;

КУРСОР (CURSOR)- логический указатель, отображаемый на  экране  в
виде перекрестия, у которого полностью высвечивается  горизонталь-
ная составляющая, а вертикальная - только  в  тех  частях  экрана,
которые  не  заняты  видами;   вертикальная   составляющая   также
маркируется  на  горизонтальных  обрамляющих  активного  (наиболее
приоритетного) вида.

     Примечание.На экране  нумерация  строк  начинается  с  0,  а
нумерация  полосок  -  с  1.  В  запросах  к  оконной  системе	не
рекомендуется размещать виды  на  границах  экрана,  поскольку	на
краях трубки монитора возможны различные искажения,  специфические
для конкретного типа монитора.

Пример возможного отображения двух плоскостей и четырёх  видов	на
экране:

				      ┌────────────────┐
плоскость-1			      │плоскость-2     │
┌──────────────────────────────┐      │ 	       │
│  окно-1.1		       │      │ 	       │
│  ┌─────────┐		       │      │      ┌──┐      │
│  │	     │	      окно-1.3 │      │      │	│      │
│  └─────────┘	      ┌────┐   │      │      │	│      │
│	      окно-1.2│    │   │      │      │	│      │
│		 ┌────┼──┐ │   │      │      │	│      │
│		 │    └──┼─┘   │      │      └──┘      │
│		 │	 │     │      │    окно-2.1    │
│		 │       │     │      └────────────────┘
│		 └───────┘     │
└──────────────────────────────┘

		╔══════════════════════════════════╗
		║		     порт-1.2	   ║
		║		     ┌────────┐    ║
		║		     │	      │    ║
		║	   порт-1.1  │	┌──┐  │    ║
		║		┌────┤	│  │  │    ║
		║	     ┌──┤    └──┤  ├──┘    ║
		║	     │	└─┬─────┤  │	   ║
		║	     │	  │	│  │	   ║
		║	     └────┘	└──┘	   ║
		║	   порт-1.3	порт-2.1   ║
		║				   ║
		║				   ║
		║				   ║
		╚══════════════════════════════════╝экран

вид-2.1   =    окно-2.1  +  порт-2.1	- наиболее приоритетный вид
вид-1.2   =    окно-1.2  +  порт-1.2

вид-1.1   =    окно-1.1  +  порт-1.1
вид-1.3   =    окно-1.3  +  порт-1.3	- наименее приоритетный вид

вид-2.1 		      - активный вид - этим видом можно
				управлять с помощью оконного
				менеджера

	    15.1. Организация оконной подсистемы

     Файл  WDC.MAC  содержит  определения  констант,  структур	 и
макрозапросов для управления оконным процессом из пользовательских
программ и/или других процессов.

     Распределение виртуального адресного пространства при  работе
оконного процесса имеет следующий вид:


     0	   1	 2     3     4	   5	 6     7  - страницы 8Кб
  ╠══╬══╬══╬══╬══╬══╬══╬══╬══╬══╬══╬══╬══╬══╬══╬══╣

   └─┬─┘ └────┬────┘ └──────────┬──────────┘ └─┬─┘
     │	      │ 		│	       └─ страница в/в
     │	      │ 		└────────────── фиксированная
     │	      │ 				область ОЗУ
     │	      │ 				(нижняя память)
     │	      └───────────────────────────── динамическая область
     │					     ОЗУ (верхняя память)
     │
     └──────────────────────────────────── программный код и
					   локальные переменные


     Динамическая область памяти (виртуальные адреса  20000-57776)
имеет следующую структуру:


       20000					    57776
       ┌───────────────┬────────────────────────────┐
       └───────────────┴────────────────────────────┘
	статическая	динамическая зона	стек
	таблица        ├──────────→	       ←────┤
				   ↓
	WHEAP ─────────────────────┘


Статическая таблица (размещается с виртуального адреса 20000):

WHEAP	       ;текущий указатель  свободной  части  динамической
	       зоны

SCREEN	       ;указатель на первый вид (начало списка видов)
VWSUCC	       ;дескриптор фонового окна (vwlen байт)
VWFREE	       ;указатель на список свободных дескр.видов
ARFREE	       ;указатель на список свободных дескр.плоскостей
FNFREE	       ;указатель на список свободных дескр.шрифтов
PALTBL	       ;таблица использования палитр (30 слов)
	       ; = 0 - палитра свободна
	       ;<> 0 - адрес дескр. процесса, захватившего палитру
WDTBL	       ;таблица видов (64 слова);  содержит  указатели	на
	       дескрипторы   видов   (указывает   не   на   начало
	       дескриптора, а на поле VW.TAR);	предназначена  для
	       быстрого поиска дескриптора вида по  идентификатору
	       вида; идентификатор вида -  целое  четное  число  в
	       диапазоне 2-126, т.е. всего может быть не более	64
	       видов;

ARTBL	       ;таблица плоскостей (64 слова); содержит  указатели
	       на  дескрипторы	 плоскостей;   предназначена   для
	       быстрого   поиска    дескриптора    плоскости	по
	       идентификатору плоскости; идентификатор плоскости -
	       целое четное число в диапазоне  2-126,  т.е.  всего
	       может быть не более 64 плоскостей;
proadr	       ;указатель адреса дескриптора процесса,	обративше-
	       гося к оконной системе;
SPAT	       ;"муляж экрана" (служебная таблица) размером  26;75
	       байт (экран с точки зрения оконной системы  состоит
	       из 75 логических строк,	в  каждой  из  которых	26
	       полосок; одна  логическая  строка  состоит  из  4-х
	       видео-строк);
spatzz	       ;признак конца муляжа экрана (всегда = 177777)
TAS0D	       ;ТАС для фоновой плоскости (4 слова)
TAS0	       ;дополнительный TAS для фоновой плоскости (2 слова)
CTAS	       ;ТАС для курсора (1 строка)
SXCUR	       ;область сохранения для указателя курсора (=0 - нет
	       курсора);
STAS	       ;область сохранения для ТАС курсора (addr,tas) 4 б;
XCUR	       ;координаты
YCUR	       ;   курсора
PLPAR	       ;содержимое PAR для отображения области палитр

WTOP	       = ; конец статической зоны


     Константы, определяющие маски для	описания  логической  ТАС,
используемой в запросах к оконной системе:

vm1	 = 0	   ;режим 1 бит/точку
vm2	 = 1	   ;	  2
vm4	 = 2	   ;	  4
vm4	 = 3	   ;	  4	      (2-ой режим)

vm8	 = 7	   ;	  8
pl0	 = 000000  ;номер палитры 0
pl1	 = 040000  ;		  1
pl2	 = 100000  ;		  2
pl3	 = 140000  ;		  3
plb	 = 4	   ;второй блок палитр

		Структура дескриптора вида:

VW.SUCC        ;указатель на следующий вид в списке
VW.PRED        ;указатель на предыдущий вид в списке

	часть дескриптора, задаваемая пользователем
VW.AREA        ;идентификатор плоскости

	координата верхнего левого угла окна на плоскости:
VW.ARY	       ;номер первой строки на плоскости
VW.ARX	       ;смещение от начала строки плоскости в байтах
	координаты порта на экране:
VW.SY1	       ;номер первой строки вида на экране
VW.SY2	       ;номер последней строки вида на экране
VW.SX1	       ;номер первой полоски вида на экране
VW.SX2	       ;номер последней полоски вида на экране

VW.DEN	       ;младший байт - плотность по горизонтали (0,1,2)
	       ;старший байт - плотность по вертикали (0,1,2)
	       ; 0 - соответствует минимальной плотности, т.е.
	       ; максимальной растяжке

	часть дескриптора, заполняемая оконной системой
	(внутренние параметры; shl - операция сдвига влево)
VW.TAR	       ;адрес начала ТАС для используемой плоскости
VW.HD	       ;горизонтальная плотность вида
	       ;.word [0,1,2]
VW.XOF	       ;параметр, определяющий смещение по горизонтали
	       ; ( SX1 shl HD ) - ( ARX / 2 )
VW.VD	       ;вертикальная плотность вида: .byte [0,1,2]
VW.NUM	       ;идентификатор вида: .byte [2,4,...126.]
VW.YOF	       ;параметр, определяющий смещение по вертикали
	       ; ( SY1 shl VD ) - ARY
VW.DY1	       ;параметры, определяющие
VW.DY2	       ;    растяжку
VW.DY3	       ;	 по вертикали

 VWLEN	       = длина дескриптора вида в байтах

         Структура дескриптора плоскости:

AR.SUCC        ;указатель на следующий дескриптор плоскости
AR.LEN	       ;фактическая длина дескриптора в строках
AR.LINS        ;количество строк в текущей плоскости
AR.SLEN        ;длина видео-строки в байтах
AR.TAS	       ;начало ТАС плоскости

     Фактическая длина дескриптора определяется  числом  строк	на
плоскости, для которой создавался дескриптор, и составляет 4 слова
(постоянная часть  дескриптора)  плюс  число  строк  в	плоскости,
умноженное на 2, слов.

     Для каждой видео-строки в ТАС  отводится  два  слова.  Первое
слово содержит виртуальный адрес начала строки. В таблицах оконной
системы хранятся разряды 11..2 (остальные содержат 0). В  запросах
к оконной системе  виртуальный	адрес  может  содержать  ненулевые
значения в разрядах 15..12. Второе слово содержит в разрядах 13..4
значение  регистра  диспетчера	памяти	для  виртуального  адреса,
лежащего в младших 4К окна; разряды 2..0 - видео-режим (VM1,  VM2,
VM40, VM41, VM8); разряды 15..14 - номер палитры (PL0,	PL1,  PL2,
PL3); разряд 2 определяет палитровый блок  (для  режимов  высокого
разрешения).

     Структура регистра диспетчера памяти:
  ┌─────┬─────────────────────────────┬──┬──┬─────┐
  │15 14│13 12 11 10  9 $8  7  6  5  4│ 3│ 2│ 1  0│
  └─────┴─────────────────────────────┴──┴──┴─────┘
	 21			    12	│  │   │
		    Разряды адреса ОЗУ	│  │   └──┤режим маскиро-
					│  │	   вания при за-
					│  │	   писи в ОЗУ
					│  └────── зарезервирован
					└────┤0 - разрешено ОЗУ
					      1 - запрет доступа
						  к ОЗУ

	Режми маскирования:
	0  0 - нет маскирования
	0  1 - маскирование в режиме 2 бит/точку
	1  x - маскирование в режиме 4 бит/точку

     При использовании в пользовательских программах "вторых слов"
следует  учитывать  что  непосредственное  копирование	в  регистр
диспетчера  памяти  может  приводить  к  включению   "прозрачного"
режима.

     Дескриптор плоскости -  единственная  динамическая  структура
оконной системы, имеющая переменную длину. Дескрипторы в  процессе
работы	динамически  создаются	и   освобождаются.   Освобождённые
дескрипторы связаны в список, упорядоченный по длине  дескриптора.
Первым в списке  находится  дескриптор,  имеющий  самую  маленькую
длину.

     При создании новой плоскости просматривается список свободных
дескрипторов. Если для новой  плоскости  удаётся  найти  в  списке
дескриптор подходящего	размера,  то  он  и  используется.  Однако
реальная длина новой  плоскости  может	быть  меньше,  чем  размер
использованного  дескриптора.  Фактический  размер  плоскости	по
вертикали  может  быть	меньше	размера  плоскости,  для   которой
создавался дескриптор. Поэтому в дескрипторе хранятся  две  длины:
длина первоначальной плоскости (для которой создавался дескриптор)
и длина текущей плоскости. Это позволит использовать полный размер
дескриптора в следующий раз  (после  освобождения  дескриптора	от
новой плоскости).

	  Структура дескриптора шрифта:

FN.SUCC        ;указатель на следующий дескриптор шрифта (если	0,
		то это последний дескриптор)
FN.PAR	       ;содержимое   регистра	диспетчера   памяти    для
		отображения   шрифта   (для   отображения   шрифта
		достаточно одного окна 8К)
FNLEN	       = длина дескриптора шрифта

	     Структура шрифта:

fn.tb	       ;таблица длиной 256 слов; каждое слово - это  адрес
		в области fn.beg, где начинается таблица очертаний
		символа;   адрес   должен    представлять    собой
		виртуальный адрес для случая отображения шрифта  в
		0-ое окно (другими  словами  в	таблице  находятся
		смещения от fn.tb  до  начала  байтов,	содержащих
		очертание соответствующего символа);  шрифт  может
		содержать до 256 символов; первое  слово  -  адрес
		таблицы для символа с кодом 0; следующее  слово  -
		для символа с кодом 1 и т.д.
fn.hi	       ;высота знакоместа в видео-строках  (10	-  текущее
		значение, поддерживаемое при знакоместном выводе)
fn.wi	       ;ширина знакоместа в битах (8 -	текущее  значение,
		поддерживаемое при знакоместном выводе)
fn.id	       ;.ascii "PC" - идентификатор для целей контроля
fn.nam	       ;.asciz "string" - имя шрифта (14 байт)
fn.beg	       ;начало области очертаний символов (построчно)

       Фиксированная область памяти (адреса 60000-157776):
TAS	  ;таблица адресов строк (ТАС); по 2 слова на видео-строку
TAS313	  ;дополнительная ТАС для строк  301-313  (зарезервирована
	  для последующего использования)
XXXXXX	  ;резервная область 56. + 256. байт
CTAO	  ;два слова для сохранения курсора
TAO	  ;область таблицы адресов отрезков (ТАО)
PAL	  ;область палитр 2 Кбайт размещается  в  отдельном  блоке
	  памяти, отображаемой с адреса 60000.


	     5.2. Рекомендации по использованию

     В прикладных и  системных	программах  использование  средств
оконной  системы  позволяет  существенно  сократить   затраты	на
проектирование современных средств взаимодействия с пользователем.
     Вначале определяется видеорежим, в котором будет  создаваться
и/или отображаться на экране текстовая и  графическая  информация.
Возможными режимами являются: VM1 (1 бит на точку / 2 цвета),  VM2
(2 бита на точку / 4 цвета), VM40 (4 бита на точку /  16  цветов),
VM41, полностью аналогичный режиму VM40 и  режим  VM8  (8  бит	на
точку / 256 цветов).
     Режимы VM1, VM2,  VM40,  VM41  называются	режимами  высокого
разрешения. Для каждого из этих режимов имеется  два  блока  по  4
палитры (для VM41 - только один блок, т.е. всего 4 палитры).
     Режим VM8 называется многоцветным	и  имеет  две  независимые
палитры.
     Для одного блока каждого режима высокого разрешения имеется 4
палитры, имеющие номера PL0 (№0), PL1 (№1), PL2  (№2),	PL3  (№3).
Палитра  №0  для  каждого  режима  называется	стандартной.   Все
остальные палитры могут быть захвачены программой (процессом)  для
"монопольного"	использования.	При  захвате  палитры  (в  запросе
PLCRE) необходимо указать, для какого режима будет  использоваться
палитра. После	завершения  работы  программа  должна  обязательно
освободить захваченную палитру.

     Если все палитры уже захвачены, то запрос PLCRE выполнится  с
ошибкой. В этом случае программа может	воспользоваться  любой	из
четырёх палитр требуемого режима: в запросах  модификации  палитры
PLMOD	и   сохранения	 палитры   PLSAV   никаких   проверок	на
"принадлежность" палитры не производится.
     После решения вопроса о режиме и палитре можно  приступать  к
проблеме  создания  плоскости.	Если   предполагается	работа	 с
регулярной  плоскостью	(прямоугольной	формы),  то  целесообразно
возпользоваться запросом ARCRE. Данный запрос  формирует  ТАС  для
плоскости и регистрирует плоскость в оконной системе.
     Если плоскость имеет нерегулярную	структуру,  то	прикладная
программа сама должна создать ТАС  для	этой  плоскости,  а  после
этого зарегистрировать её в оконной системе запросом ARINST.  ТАС,
созданная  в  программе,  может  изменяться  в	 процессе   работы
программы. Информация об изменениях ТАС должна сообщаться  оконной
системе запросом ARINST.  Например,  эмулятор  текстового  дисплея
типа VT-100 (входящий в состав ВПО, см.  п.8)  реализует  операции
скроллинга (сдвига содержимого экрана) путём модификации ТАС,  что
выполняется быстрее, по  сравнению  с  альтернативным  решением  -
копированием памяти.
     Процедура	регистрации  плоскости	захватывает   "дефицитную"
память	(из  динамической  области)   для   хранения   дескриптора
плоскости.  Поэтому  после  запросов  ARCRE,  ARINST   обязательно
следует делать проверку на наличие ошибок. Если этого  не  делать,
то прикладная программа может нарушить работу  всего  программного
обеспечения.  Для   экономии   памяти	в   динамической   области
рекомендуется использовать плоскости, имеющие небольшие размеры по
вертикали  (размер  плоскости  по   горизонтали   не   влияет	на
использование памяти динамической области).
     Следует  не  забывать  удалять неиспользуемые  плоскости   из
оконной системы с помощью запроса ARKILL  или  с  помощью  команды
AREA-KILL в оконном менеджере.
     Собственно создание и манипулирование  видами  на	экране	не
представляет сложности. При создании или модификации вида  оконная
система проверяет и корректирует  все  параметры  так,	чтобы  они
имели допустимые значения. Ошибок при этом не происходит. Реальные
(текущие) параметры вида всегда можно получить запросом VWTAKE.
     Следует  обратить	внимание,  что	активный   вид	 (наиболее
приоритетный)  помечается  в  оконной  системе	с   помощью   двух
горизонтальных	строк,	обрамляющих   вид   на	 экране.   Поэтому
информация в самой верхней и самой  нижней  видеостроках  вида	не
отображается.  Возможным   решением   данной   проблемы   является
выделение двух дополнительных строк в плоскости (эти строки  могут
с помощью ТАС адресоваться на одну и ту же память).
     Ещё одной особенностью оконной системы является  дискретность
размещения видов: по вертикали - 4 видео-строки, а по  горизонтали
- одна полоска. Дискретность  позиционирования	плоскости  в  виде
определяется одной видео-строкой по вертикали, а по горизонтали  -
с точностью до четырёх байт (каждая видео-строка должна задаваться
адресом, кратным 4,  а	смещение  по  горизонтали  -  должно  быть
кратным 4).

     Оконная подсистема, эмулятор тексового дисплея и  стандартный
шрифт размещаются в системном ПЗУ и автоматически инициализируются
при включении питания ПЭВМ (перед загрузкой ДОС).
     Загрузка дополнительных  компонент  (дополнительных  шрифтов,
оконного  менеджера,  эмулятора  графического	дисплея   и   т.п.
выполняется  с	помощью  утилит,  входящих  в  состав	ВПО,   под

управлением ДОС.

1. Загрузка и регистрация "жирного" шрифта:

	  .fload bold

2. Загрузка процесса оконного менеджера:

	  .prun vm.prc

3. Загрузка процесса эмулятора графического дисплея:

	  .prun gt.prc

Примечание.Для загрузки и регистрации шрифта (шрифтов)  в  состав
ВПО входит программа FLOAD. Программе в формате командной  строки
CSI указывается спецификация  файла,  содержащего  шрифт,  который
нужно загрузить. Тип файла по умолчанию -  .FON.  Программа  FLOAD
выполняет  различные   проверки,   захватывает	 область   памяти,
загружает шрифт из файла и регистрирует шрифт в  оконной  системе.
После  этого   на   текстовом	дисплее   распечатывается   список
идентификаторов (имён) всех шрифтов, зарегистрированных в  оконной
системе.

	          15.3. Запросы

     Оконная подсистема является процессом  с  точки  зрения  ВПО.
Этот  процесс  управляется  посредством  одного   регистра   (т.е.
обслуживает один регистр):

WCSR	  = 177530	 ; регистр управления оконной подсистемой

     Все запросы к оконному процессу имеют следующий вид:

     mov  #adr,     @#WCSR    ;записать адрес блока запроса
     ...
adr: .blkw     X	      ;память для блока запроса

     Обращение к оконному процессу выполняется путём записи адреса
управляющего  блока  в	 регистр   WCSR   (обслуживаемый   оконным
процессом).  Управляющий  блок	должен	размещаться   в   адресном
пространстве  процесса,  который   выполняет   обращение.   Размер
управляющего блока зависит от типа запроса.
     В первом слове управляющего блока перед обращением к  оконной
системе находится код запроса. Если запрос не будет выполнен из-за
ошибок	(обнаруженных  оконным	 процессом),   то   первое   слово
управляющего блока будет содержать отрицательный код запроса.
     Если в макрокоманде  аргумент  пропущен,  то  соответствующая
ячейка в таблице area макрокомандой изменяться не будет.
     Макрокоманды "портят" регистр R0:	после  запроса	R0  всегда
содержит адрес начала таблицы AREA  т.е. адрес ячейки,	в  которой
размещается код запроса.


	  5.3.1. Работа с плоскостямиx0
	  ═══════════════════════════
;------------------------
     Зарегистрировать плоскость в оконной системе (код запроса 0):

ARINST	  area,anum,lins,slen

     area  -  адрес  таблицы  аргументов  (ТАС	плоскости   должна
следовать непосредственно за последним аргументом в таблице area);
     anum  -  если  данный  аргумент  равен  0,  то  информация  о
плоскости будет зарегистрирована, а в  таблице	area  (2-е  слово)
будет возвращён идентификатор плоскости; если аргумент не 0, то он
определяет   идентификатор   плоскости,    для	  которой    будет
скорректирован ТАС;
     lins - количество строк на плоскости;
     slen - длина одной строки в байтах;

     Далее в таблице area должен следовать ТАС	плоскости  (именно
ТАС  определяет  плоскость);  ТАС  является  таблицей  двухсловных
указателей для каждой строки плоскости. Для каждой видео-строки  в
ТАС отводится два слова. Первое слово содержит	виртуальный  адрес
начала строки. Второе слово содержит  в  разрядах  11..4  значение
регистра диспетчера памяти для отображения начала строки в младшие
4К окна; разряды  1..0	-  видео-режим	(vm1,  vm2,  vm40,  vm41);
разряды  15..14  -  номер  палитры  (pl0,  pl1,  pl2,  pl3).   При
использовании в программах "вторых  слов"  следует  учитывать  что
непосредственное копирование в регистр диспетчера памяти  приведёт
к включению "прозрачного" режима.

;------------------------
     Удалить информацию о плоскости из оконной	системы,  а  также
все виды, связанные с данной плоскостью (код запроса 2):

ARKILL	  area,anum

     area - адрес таблицы аргументов;

     anum - идентификатор плоскости, которую необходимо удалить;
;------------------------
     Создать ТАС и зарегистрировать плоскость  в  оконной  системе
(код запроса 38):

ARCRE	  area,adr,lins,slen,mdpl

     area - адрес таблицы аргументов;

     adr - виртуальный адрес в программе пользователя,	начиная  с
которого будет размещаться  плоскость;	если  не  будет  ошибок  и
плоскость будет зарегистрирована, то в таблице	area  (2-е  слово)
будет возвращён идентификатор плоскости;

     lins - количество строк на плоскости;

     slen - длина одной строки в байтах;

     mdpl - содержит видеорежим и номер  используемой  палитры	(в
формате констант, описанных выше);

	  5.3.2. Работа с видами
	  ══════════════════════
;------------------------
     Создать или модифицировать параметры вида (код запроса 4):

VWCRE	  area,wnum,anum,ary,arx,sy1,sy2,sx1,sx2,den

     area - адрес таблицы аргументов;

     wnum - если данный аргумент равен 0, то будет  создан  вид  в
соответствии с остальными аргументами запроса;	после  нормального
выполнения запроса во втором слове таблицы  area  будет  возвращён
идендификатор созданного вида; если аргумент не равен  0,  то  это
идентификатор вида, параметры которого необходимо модифицировать;

     anum - идентификатор плоскости;

	  координаты верхнего левого угла на плоскости:

     ary - номер строки на плоскости;

     arx - смещение в байтах относительно начала видео-строк;

	  координаты вида на экране:

     sy1 - номер верхней строки на экране;

     sy2 - номер нижней строки на экране;

     sx1 - номер левой полоски на экране;

     sx2 - номер правой полоски на экране;

     den - параметр, определяющий  масштабирование;  младший  байт
определяет масштабирование по горизонтали (0 - растяжка в 4  раза,
1 - растяжка в 2 раза, 2 - нет растяжки); старший байт	определяет
масштабирование по вертикали (0 - растяжка в 4 раза, 1 -  растяжка
в 2 раза, 2 - нет растяжки);
;------------------------
     Удалить вид (код запроса 6):

VWKILL	  area,wnum

     area - адрес таблицы аргументов;

     wnum - идентификатор вида, который необходимо удалить;

;-------------------------
     Получить параметры вида (код запроса 8):

VWTAKE	  area,wnum

     area - адрес таблицы аргументов;

     wnum -  идентификатор  вида,  параметры  которого	необходимо
получить;  параметры  возвращаются  в  таблицу	area  в   формате,
идентичном запросу VWCRE;
;-------------------------
     Сделать вид самым приоритетным (код запроса 10):

VWFORE	  area,wnum

     area - адрес таблицы аргументов;

     wnum  -  идентификатор  вида,  который  будет  сделан   самым
приоритетным;

;-------------------------
     Сделать вид наименее приоритетным (код запроса 12):

VWBACK	  area,wnum

     area - адрес таблицы аргументов;

     wnum - идентификатор  вида,  который  будет  сделан  наименее
приоритетным;

;-------------------------
     Просмотр списка видов, зарегистрированных в  оконной  системе
(код запроса 34):

VWLOOK	  area,wnum

     area - адрес таблицы аргументов;

     wnum - если данный аргумент равен 0, то во втором слове  area
возвращается идентификатор первого вида (наиболее  приоритетного),
за которым будут  следовать  остальные	параметры  вида;  если	во
втором	слове  area  находится	идентификатор	вида,	то   будет
возвращена информация о следующем виде; если текущий вид последний
(наименее приоритетный), то во втором слове area  будет  возвращён
0;

	  5.3.3. Работа с палитрами
	  ═════════════════════════

     Палитра представляет собой набор цветов,  в  котором  каждому
коду  точки  соответствует   свой   цвет,   задаваемый	 разрядами
(интенсивностями) по компонентам R, G и B (двумя байтами - младшим
и старшим) следующим образом:


  7  6	5  4  3  2  1  0   7  6  5  4  3  2  1	0
┌────────┬────────┬─────┐ ┌────────┬─────┬────────┐
│G5 G4 G3│R4 R3 R2│B4 B3│ │G2 G1 G0│R1 R0│B2 B1 B0│
└────────┴────────┴─────┘ └────────┴─────┴────────┘
 └──┬───┘ └──┬───┘ └─┬─┘   └──┬───┘ └─┬─┘ └──┬───┘
    │	     │	     └───────────────────────┘
    │	     │		      │       │
    │	     │		      │       │
    │	     └────────────────────────┘
    │			      │
    │			      │
    └─────────────────────────┘

     Полная информация	о  видеоконтроллере  и,  в  том  числе,  о
палитрах  приводится  в  техническом  описании.  Палитры  высокого
разрешения занимают 32 байта каждая (16 старших байт цвета и 16  -
младших). Палитры многоцветного режима занимают  512  байт  каждая
(256 старших байт и 256 - младших).

;-------------------------
     Захватить палитру (код запроса 14):

PLCREx	  area,modnum

     area - адрес таблицы аргументов;

     modnum  -	видеорежим,  для  которого  будет   использоваться
палитра; видеорежим должен задаваться константами (vm1, vm2, vm40,
vm41, vm8); начиная с третьего слова таблицы area должны следовать
32 байта (512 байт для многоцветного режима), определяющие цвета в
соответствии с видеорежимом; в этом же (втором) слове таблицы area
будет возвращён номер выделенной палитры в формате  констант  pl0,
pl1, pl2, pl3 и plb; если все палитры требуемого режима заняты, то
запрос выполнится с ошибкой;

;-------------------------
     Освободить палитру (код запроса 16):

PLFREx	  area,modnum

     area - адрес таблицы аргументов;

     modnum - видеорежим, для которого будет освобождена  палитра;
видеорежим должен задаваться константами (vm1,	vm2,  vm40,  vm41,
vm8); номер палитры, которая  должна  быть  освобождена,  и  номер
блока палитр задаются в формате констант pl0, pl1, pl2, pl3 и plb;
этим запросом можно освободить "чужую" палитру (захваченную другим
процессом);


;-------------------------
     Выполнить модификацию палитры (код запроса 18):

PLMODx	  area,modnum

     area - адрес таблицы аргументов;

     modnum  -	видеорежим,  для  которого  будет   модифицирована
палитра; видеорежим должен задаваться константами (vm1, vm2, vm40,
vm41, vm8); номер блока и палитры задаётся в формате констант pl0,
pl1, pl2, pl3, plb;

     начиная с третьего слова таблицы  area  должны  следовать	32
байт (512 байт для многоцветного режима), определяющие новые цвета
в соответствии с видеорежимом;
     данным запросом можно модифицировать "чужую" палитру;

;-------------------------
     Сохранить (прочитать) содержимое палитры (код запроса 20):

PLSAVx	  area,modnum

     area - адрес таблицы аргументов;

     modnum - видеорежим, для которого	будет  сохранена  палитра;
видеорежим должен задаваться константами (vm1,	vm2,  vm40,  vm41,
vm8); номер блока и палитры задаются в формате констант pl0,  pl1,
pl2, pl3, plb;

     начиная с третьего слова таблицы  area  будут  возвращены	32
байта (512 байт  для  многоцветного  режима),  определяющие  цвета
палитры;
     данным запросом можно сохранить содержимое "чужой" палитры.


	  5.3.4. Работа с курсором
	  ════════════════════════

;-------------------------
     Установить курсор (перекрестие) или  изменить  его  положение
(код запроса 22):

CRSET	  area,xcur,ycur

     area - адрес таблицы аргументов;
     xcur - координата курсора по оси Ч (диапазон 0-415);
     ycur - координата курсора по оси Н (диапазон 0-299);

;-------------------------
     Убрать курсор с экрана (код запроса 24):

CRERA	  area

     area - адрес таблицы аргументов;

	  5.3.5. Работа со шрифтами
	  ═════════════════════════

;-------------------------
     Зарегистрировать новый шрифт в оконной системе  (код  запроса
26):

FNINST	  area,par

     area - адрес таблицы аргументов;

     par - содержимое регистра диспетчера памяти  для  отображения
шрифта;

;-------------------------
     Удалить шрифт из оконной системы (код запроса 28):

FNKILL	  area,par

     area - адрес таблицы аргументов;

     par - содержимое регистра диспетчера памяти  для  отображения
шрифта, который нужно удалить из оконной системы;

;-------------------------
     Вернуть содержимое регистра диспетчера памяти для отображения
шрифта по его имени (код запроса 30):

FNFIND	  area

     area - адрес таблицы аргументов;

     Начиная с третьего слова таблицы area должно размещаться  имя
искомого шрифта в  формате  .asciz;  если  требуемый  шрифт  будет
найден,  то  во  втором  слове	area  будет  находится	содержимое
регистра диспетчера памяти для отображение этого шрифта;

;-------------------------
     Просмотр списка шрифтов, зарегистрированных в оконной системе
(код запроса 32):

FNLOOK	  area,xpar

     area - адрес таблицы аргументов;

     xpar - если данный аргумент равен 0, то во втором слове  area
возвращается адрес дескриптора первого шрифта,	за  которым  будет
следовать его имя в формате .asciz;  если  во  втором  слове  area
находится адрес дескриптора шрифта, то будет возвращена информация
о следующем шрифте; если текущий шрифт	последний,  то	во  втором
слове area будет возвращён 0;

	  5.3.6. Знакоместный вывод
	  ═════════════════════════

;-------------------------
     Вывод текстовой (знакоместной) информации на  плоскость  (код
запроса 36):

WPRINT	  area,anum,y0,x0,sadr

     area - адрес таблицы аргументов;

     anum  -  идентификатор  плоскости,  на   которую	необходимо
выводить информацию; по плоскости определяется в каком режиме (бит
на точку) будет осуществляться вывод;

     y0 - номер видео-строки, начиная с  которой  будет  выводится
информация;

     x0 - смещение в байтах от начала строки на плоскости, начиная
с которой будет выводится информация;

     sadr - адрес кодовой строки в  формате  .asciz,  определяющей
содержимое выводимой информации;

     Последний аргумент запроса WPRINT	определяет  адрес  строки,
выводимой    на    плоскость.	 Строка     представляет     собой
последовательность  байт.  Байты,  содержащие  коды  от  0  до	37
(восьмеричное),  являются  командами.  Различные   команды   могут
состоять  из  одного  или  более  байт,  что  определяется   самой
командой. При описании команд в начале приводится восьмеричный код
команды. Аргументы всех команд являются байтовыми.

     Текущая  версия  оконной  системы  поддерживает  знакоместный
вывод и формат шрифта размерностью 10х8.
     Ширина одного знакоместа при выводе на плоскость 1  бит/точку
равна одному байту, при выводе 2  бита/точку  -  2-м  байтам,  при
выводе 4 бита/точку - 4-м байтам, при вывода 8	бит/точку  -  8-ми
байтам.

     Список команд:

     0	  - данная  команда  без  аргументов  и  определяет  конец
выводимой строки;

     1	  -  команда  смены  шрифта;  за  кодом  команды   следует
абсолютный номер шрифта  (в  списке  оконной  системы);  выбранный
шрифт будет использоваться до следующей команды смены  шрифта;	по
умолчанию вывод будет выполняться с использованием шрифта номер 0;

     2	  - команда смещения на  плоскости  относительно  текущего
положения по оси X в байтах; смещение задаётся	байтом,  следующим
за   кодом   команды;	по   умолчанию	 вывод	  выполняется	 в
"последовательные   знакоместа";   смещение   может    выполняться
"вперёд", если смещение положительное  число,  или  "назад",  если
число отрицательное;

     3	  - команда смещения на  плоскости  относительно  текущего
положения по оси Y в строках; смещение задаётся байтом,  следующим
за кодом команды; смещение может выполняться "вниз", если смещение
положительное число, или "вверх", если число отрицательное;

     4	  - команда задаёт маску (второй  байт	команды),  которая
будет определять логическую операцию XOR при выводе всех следующих
знакомест;  если  маска  =  0,	то  преобразование  знакоместа	не
выполняется; если маска = 377 (восьмеричное число),  то  выводимая
информация будет инвертироваться;

     5	  -  команда  включает	"прозрачный  режим"   при   выводе
знакомест;

     6	  - команда  выключает	"прозрачный  режим"  вывода,  т.е.
включает нормальный режим; нормальный режим  вывода  действует	по
умолчанию;

     7	  - команда задания цвета; второй байт команды	определяет
коды цветов  (оперативный  и  фоновый),  используемых  при  выводе
знакомест; данная команда игнорируется при выводе на  плоскость  в
режиме 1 бит на точку; младший полубайт определяет код цвета фона,
а  старший  полубайт  -  код  цвета,  которым	будет	выводиться
знакоместо;

     10   - однобайтовая  команда,  эквивалентная  "4,0"  -  вывод
знакоместа производится без преобразования;

     11   -  однобайтовая   команда,   эквивалентная   "4,377"	 -
производится вывод знакоместа с предварительным инвертированием;

     12   - команда смещения на  плоскости  относительно  текущего
положения по оси X  в  знакоместах,  т.е.  не  зависит	от  режима
плоскости (бит/точку);	смещение  задаётся  байтом,  следующим	за
кодом команды; по умолчанию вывод выполняется в  "последовательные
знакоместа"; смещение может выполняться  "вперёд",  если  смещение
положительное число, или "назад", если число отрицательное;

     13   - команда смещения на  плоскости  относительно  текущего
положения по оси Y в  знакоместах,  т.е.  в  десятках  видеострок,
поскольку  10.	-  высота  "стандартного"  знакоместа  в  строках;
смещение задаётся байтом, следующим  за  кодом	команды;  смещение
может выполняться "вниз", если смещение положительное  число,  или
"вверх", если число отрицательное;

     14   - за кодом команды должны следовать 10. байт,  определя-
ющих содержимое знакоместа, которое будет выведено  на	плоскость;
данная	 команда   позволяет   выводить   знакоместа,	 например,
отсутствующие в текущем шрифте;

     Все остальные коды команд в  данной  версии  оконной  системы
отрабатываются как "нет операции", т.е. как пустые команды.


	  5.3.7. Блочные пересылки
	  ════════════════════════

;-------------------------
     Блочные пересылки между плоскостями и/или памятью в программе
пользователя (код запроса 40):

HBMOVE	  area,ar1num,cmd,ar1y,ny,ar1x,nx,ar2num,ar2y,ar2x

     area - адрес таблицы аргументов;

     ar1num - идентификатор плоскости-1 (байтовый аргумент);

     cmd - код команды блочной пересылки (байтовый аргумент);

     ar1y - номер первой строки для пересылки на плоскости-1;

     ny - количество строк на плоскости-1, участвующих в  пересыл-
ке;

     ar1x  -  смещение	в  байтах   относительно   левой   границы
плоскости-1 для пересылки;

     nx - размер прямоугольной области по горизонтали в байтах	на
плоскости-1 для пересылки;

Следующие аргументы запроса зависят от выполняемой команды.

команда (1) пересылка плоскость-2→плоскость-1:

     ar2num   -   идентификатор   плоскости-2,	  которая    будет
использоваться в качестве источника;  плоскость-1  будет  являться
приёмником;
     ar2y - номер первой строки для пересылки из плоскости-2;
     ar2x  -  смещение	в  байтах   относительно   левой   границы
плоскости-2 для пересылки;

команда (2) пересылка плоскость-1→память:

     ar2num - виртуальный адрес начала буфера в памяти (куда будет
выполнена пересылка);
     ar2y - "длина" строки буфера в байтах; если "длина" равна	0,
то строки плоскости займут непрерывную область памяти;
     ar2x - не используется;

команда (3) пересылка память→плоскость-1:

     - все аргументы имеют смысл, аналогичный случаю (2);

команда (4) пересылка константа→плоскость-1:

     ar2num  -	константа,   которой   будет   заполнена   область
плоскости-1 (область определяется предыдущими аргументами);

Байт   кода   команды	 определяется	 следующими    константами
(восьмеричными):

v.mask	  =    200  ; включает режим пересылки с учётом  "прозрач-
		      ного" цвета (имеющего код 0);
v.dx	  =    100  ; включает пересылку в обратном направлении по
		      горизонтали; в  противном  случае  пересылка
		      выполняется в прямом направлении
v.dy	  =    040  ; включает пересылку в прямом  направлении	по
		      вертикали;  в  противном	случае	 пересылка
		      выполняется в обратном направлении

v.vp	  =    030  ; команда (2) плоскость-1→память
v.vv	  =    020  ; команда (1) плоскость-2→плоскость-1
v.pv	  =    010  ; команда (3) память→плоскость-1
v.cv	  =    000  ; команда (4) константа→плоскость-1

     задание логических операций при пересылке
     (src - источник, dst - приёмник):

v.bic	=    006  ; dst:=dst and not src
v.bis	=    004  ; dst:=dst or src
v.xor	=    002  ; dst:=dst xor src
v.mov	=    000  ; dst:=src

v.byte =     001  ; выполнить побайтовую  пересылку;	в  противном
		      случае будет выполняться	пословная  пересылка
		      (адреса  и  размеры  рекомендуется   указывать
		      чётными)

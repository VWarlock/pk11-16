
	  8. Графический дисплей
							  19.09.90

     Графический дисплей представляет собой  процесс,  реализующий 
базовый набор графических функций, на основе  которого,  вместе  с 
другими компонентами системы (эмулятором мыши, клавиатуры и  пр.), 
пользователь может создать свой собственный графический  терминал. 
Эмулятор не имитирует какой─либо конкретный графический дисплей.

     Основные термины:

РАСТР  ─  совокупность   управляющей   структуры   и   графической 
плоскости. С точки зрения оконной  системы  графическая  плоскость 
является  обычной  плоскостью,  и  к  ней  применимы  все  запросы 
эмулятора многооконной поддержки. Для повышения скорости генерации 
графических примитивов она организована следующим образом:  каждая 
страница  памяти  размером   8Кб  содержит  целое   число   строк, 
расположенных  последовательно   (остаток   страницы   пропадает). 
Управляющая структура содержит информацию о  размерах  графической 
плоскости,  окне  вывода,  текущей  точке,  типе  линии  и  другие 
параметры. Одновременно может существовать до 16─и растров.

ОКНО ВЫВОДА ─ прямоугольная область, в границах которой происходит 
вывод графических объектов. Объекты или их части, не попадающие  в 
окно,  отсекаются.  После  создания  растра   окно   совпадает   с
прямоугольной   областью,   соответствующей    всей    графической 
плоскости.

ТЕКУЩАЯ ТОЧКА ─ понятие, соответствующее текущему  положению  пера 
графопостроителя.

запросы:

     Эмулятор графического  дисплея  является  процессом  с  точки 
зрения ВПО. Этот процесс управляется посредством  одного  регистра 
(т.е. обслуживает один регистр):

G.CSR	  ═ 177600	 ; регистр управления графическим дисплеем

     Все запросы к эмулятору графического дисплея имеют  следующий 
вид:

     mov  #adr, @#g.csr  ; заносим адрес блока запроса
     nop		 ; в регистр команд
     ...
adr:			 ; управляющий блок запроса
     .blkw     x	 ; (содержит код запроса и параметры)

     Обращение к  эмулятору  графического  дисплея  осуществляется 
засылкой  адреса  управляющего	блока  в  регистр  команд   G.CSR.
Управляющий  блок  должен  размещаться  в  адресном   пространстве 
процесса, выполняющего обращение.

     Перед обращением в управляющий блок  засылаются  код  запроса 
(первое слово блока) и его параметры (координаты точки, код цвета, 
адрес шаблона заполнения контура и  т.д.).  Разные  команды  имеют 
разное число параметров и, соответсвенно, используют разное  число 
слов  блока.  Если  в  макрокоманде  запроса   опущен   какой─либо 
параметр, то соответствующее слово управляющего блока меняться  не 
будет.
     Для программ на языке ассемблера все необходимые  определения 
и макрокоманды содержатся в файлах P16MAC.MAC, WDC.MAC	и  GM.MAC.
Для включения в программу этих файлов  рекомендуется  использовать 
следующую последовательность директив:

...
.nlist
.include  "p16mac.mac"
.include  "wdc.mac"
.include  "gm.mac"
.list
...

     Макрокоманды "портят" регистр  R0:  после	запроса  последний
содержит адрес управляющего блока.
     Если при обработке запроса эмулятором обнаружена  ошибка,  то 
реакция на нее зависит от характера самой ошибки. Некоторые ошибки 
приводят к тому, что команда  игнорируется  эмулятором,  например, 
несуществующий запрос. Другие  ошибки  "исправляются"  эмулятором, 
например,  растровая  операция	mov  в	режиме	 VM1   подменяется
растровой операцией bis. Существует,однако, класс  диагностируемых
ошибок. Если встречается такая ошибка,  то  эмулятор  заносит  код 
ошибки в первое слово блока.

ERR.00	  ═ 100000	 ; нет памяти для заведения растра
ERR.01	  ═ 100001	 ; запрос содержит недопустимые параметры
ERR.02	  ═ 100002	 ; растр не существует (не создан)
ERR.03	  ═ 100003	 ; число одновременно существующих
                         ; растров не может превышать 16
ERR.04	  ═ 100004	 ; слишком сложный контур

	  8.1. Работа с растрами

     Создать новый растр (код запроса 0):

GCREA	  area,width,height,modpal

     area      ─ адрес управляющего блока;
     width     ─ ширина растра в пикселах;
     height    ─ высота растра в строках;
     modpal    ─ аргумент, определяющий  режим	(VM1,  VM2,  VM40,
		 VM41) и номер палитры (pl0,  pl1,  pl2,  pl3).

     Если  запрос  выполнился  без  ошибок,  то  во   2─ом   слове 
управляющего блока возвращается идентификатор растра, а в  3─ем  ─ 
идентификатор  плоскости.  Идентификатор  растра  используется   в 
остальных запросах к эмулятору графического дисплея для  указания, 
над  каким  именно  растром  будет   выполняться   соответствующая 
операция.

;────────────────────────
     Удалить  информацию  о  растре  из   эмулятора   графического 
дисплея, а о его плоскости и связанных с ней видах  ─  из  оконной 
системы (код запроса 1):

GKILL	  area,ident

     area      ─ адрес управляющего блока;
     ident     ─ идентификатор растра.

     Использование   вместо   GKILL   запроса	ARKILL	 эмулятора
многооконной поддержки  недопустимо,  т.к.  при  этом  сохраняется 
регистрация растра эмулятором графического дисплея.

;────────────────────────
     Очистить растр (код запроса 2):

GCLRR	  area,ident

     area      ─ адрес управляющего блока;
     ident     ─ идентификатор растра.


          8.2. Установка параметров

;────────────────────────
     Установить коэффициент сжатия окружности  по  одной  из  осей 
(код запроса 3):

GASP	  area,ident,xasp,yasp

     area      ─ адрес управляющего блока;
     ident     ─ идентификатор растраж
     xasp,yasp ─ положительные	 целые	  числа,    определяющие
                 коэффициент сжатия.

     Если  xasp  >  yasp,  то  сжатие  с  коэффициентом  yasp/xasp
происходит по оси x, в противном случае ─ по оси y с коэффициентом
xasp/yasp.

;────────────────────────
     Установить окно вывода (код запроса 4):

GWNDW	  area,ident,x1,y1,x2,y2

     area      ─ адрес управляющего блока;
     ident     ─ идентификатор растра;
     x1,y1     ─ координаты первой точки любой из диагоналей окна;
     x2,y2     ─ координаты второй точки.

     После установки окна вывода генерация графических  примитивов 
происходит только в границах окна. При создании нового растра  его 
окно устанавливается равным всей плоскости растра.
     Если окно  выходит  за  границы  растра,  то  соответствующие 
параметры окна корректируются.

;────────────────────────
     Установить код оперативного цвета генерации  примитивов  (код 
запроса 5):

GFGC	  area,ident,color

     area      ─ адрес управляющего блока;
     ident     ─ идентификатор растраж
     color     ─ код оперативного цвета.

     Код оперативного цвета, устанавливаемого в  действительности, 
есть остаток от деления  кода,  указанного  в  запросе,  на  число 
цветов видеорежима.
     Этот    код    присваивается    пикселу    примитива,    если 
соответствующий разряд типа линии установлен в 1.

;────────────────────────
     Установить  код  фонового  цвета  генерации  примитивов  (код 
запроса 6):

GBGC	  area,ident,color

     area      ─ адрес управляющего блока;
     ident     ─ идентификатор растраж
     color     ─ код фонового цвета.

     Код фонового цвета, устанавливаемого в действительности, есть 
остаток от деления кода, указанного в  запросе,  на  число  цветов 
видеорежима.
     Этот    код    присваивается    пикселу    примитива,    если 
соответствующий разряд типа линии установлен в 0.

;────────────────────────
     Установить растровую операцию генерации примитивов  и  точных 
блочных пересылок(код запроса 7):

GROP	  area,ident,code

     area      ─ адрес управляющего блока;
     ident     ─ идентификатор растраж
     code      ─ код растровой операции (0 ─ MOV, 1  ─	BIS,  2  ─
		 XOR,  3 ─ BIC).

     В целях эффективности из 16─и возможных  логических  операций 
выбраны только 4, каждая из  которых  реализуется  одной  командой 
процессора.
     При создании  растра  устанавливается  операция  с  кодом  0. 
Поскольку  для	видеорежима  VM1  (1  бит  на  точку)  отсутствует
аппаратная поддержка прозрачного цвета, то  растровая  операция  с 
кодом 0 автоматически подменяется операцией с кодом 1.

;────────────────────────
     Установить тип линии (код запроса 8):

GTYPE	  area,ident,type

     area      ─ адрес управляющего блока;
     ident     ─ идентификатор растраж
     type      ─ маска типа линии (16─и разрядное слово).

     Если пикселам соответствуют установленные разряды  маски,  то 
пикселы отображаются оперативным цветом,  а,  если  очищенные,  то 
фоновым.

;────────────────────────
     Установить образец заполнения  контура  узором  (код  запроса 
9):

GPTRN	  area,ident,address

     area      ─ адрес управляющего блока;
     ident     ─ идентификатор растраж
     address   ─ адрес образца.

     1─ое слово образца содержит его  длину  в  пикселах,  2─ое  ─
высоту в строках, далее следует собственно образец. Строка образца 
должна содержать целое число слов. Ее длина  задается  в  пикселах 
для совместимоти с запросами "точных" блочных пересылок.
     Полный размер образца не должен превышать 8Кб.


          8.3. Графические примитивы

;────────────────────────
     Объявить текущую точку (код запроса 10):

GMOVE	  area,ident,x,y

     area      ─ адрес управляющего блока;
     ident     ─ идентификатор растраж
     x,y       ─ координаты точки.

;────────────────────────
     Установить пиксел в указанной точке и  объявить  ее  текущеей 
(код запроса 11):

GDOT	  area,ident,x,y

     area      ─ адрес управляющего блока;
     ident     ─ идентификатор растраж
     x,y       ─ координаты точки.

     Если заданная точка лежит  вне  окна  вывода,  то  пиксел  не 
устанавливается (в этом случае запрос  GDOT  эквивалентен  запросу
GMOVE).

;────────────────────────
     Считать значение пиксела в заданной точке (код запроса 12):

GGET	  area,ident,x,y

     area      ─ адрес управляющего блока;
     ident     ─ идентификатор растраж
     x,y       ─ координаты точки.

     Значение пиксела  возвращается  во  3─ем  слове  управляющего 
блока.	Если точка лежит вне окна, то возвращается ─1.

;────────────────────────
     Провести  отрезок  прямой  из  текущей  точки  в  заданную  и 
объявить последнюю текущей (код запроса 13):

GLINE	  area,ident,x,y

     area      ─ адрес управляющего блока;
     ident     ─ идентификатор растра;
     x,y       ─ координаты конечной точки отрезка.

;────────────────────────
     Провести дугу из текущей точки в заданную против часовой (код 
запроса 14) или по часовой (код запроса 15) стрелке:

GARCC	  area,ident,xc,yc,xf,yf   (против часовой)

GARCW	  area,ident,xc,yc,xf,yf   (по часовой)

     area      ─ адрес управляющего блока;
     ident     ─ идентификатор растра;
     xc,yc     ─ координаты центра дуги;
     xf,yf     ─ координаты конечной точки дуги.

     Если начальная и конечная точки дуги совпадают,  то  строится 
полная окружность. Конечная точка дуги становится текущей.  Радиус 
дуги не должен быть меньше шести пикселов.

;────────────────────────
     Заполнить контур с произвольной границей ранее  установленным 
узором (код запроса 16):

GFILL	  area,ident,x,y

     area      ─ адрес управляющего блока;
     ident     ─ идентификатор растраж
     x,y       ─ начальная точка (зерно) заливки.

     Значение пиксела в зерне определяет какие  пикселы  считаются 
внутренностью фигуры. Любые пикселы с отличным значением считаются 
контуром. Принимается,  что  внутренность  фигуры  4─х─связная,  а 
контур, соответственно, 8─и─связный.
     Данный запрос не меняет текущую точку.

          8.4. Точные блочные пересылки

     Данные запросы осуществляют пересылку блоков с  точностью  до 
пиксела и  названы  так,  дабы  отличать  их  от  быстрых  блочных 
пересылок эмулятора многооконной поддержки.
     Точные блочные пересылки не меняют текущую точку растра.  Они 
подвергаются отсечению в окне вывода.

;────────────────────────
     Пересылка блока из памяти пользователя в растр  (код  запроса 
17):

GRVR	  area,ident,x,y,address

     x,y       ─ координаты начальной (левой верхней) точки вывода
                 блока в растре;
     address   ─ виртуальный адрес блока.

     1─ое слово блока содержит длину строки блока в пикселах, 2─ое 
─ высоту блока в строках, далее следует собственно блок.
     Каждая строка блока заполняется  с  нулевого  бита   нулевого 
слова строки и занимает целое число  слов.   Таким  образом,  если 
длина  строки  не  кратна  целому  числу  слов  "лишние"   пикселы 
последнего слова каждой строки пропадают.
     Полный размер блока не должен превышать 8Кб.

;────────────────────────
     Пересылка блока из растра в память пользователя (код  запроса 
18):

GVRR	  area,ident,x1,y1,x2,y2,address

     area      ─ адрес управляющего блока;
     ident     ─ идентификатор растраж
     x1,y1     ─ координаты 1─ой точки	диагонали
                 прямоугольника, ограничивающего блок;
     x2,y2     ─ координаты 2─ой точки;
     address   ─ виртуальный адрес блока.

     В 1─ое слово блока заносится длина строки в пикселах, во 2─ое 
высота блока в строках, далее  следуют  строки  блока,  каждая  из 
которых занимает целое число слов. "Лишние"  пикселы  в  последнем 
слове каждой строки пропадают.
     Размер пересылаемого блока не должен превышать 8Кб.

;────────────────────────
     Пересылка блока растр─растр (код запроса 19):

GVRVR	  area,ident,x1,y1,x2,y2,x,y

     area      ─ адрес управляющего блока;
     ident     ─ идентификатор растраж
     x1,y1     ─ координаты 1─ой точки диагонали
                 пересылаемого блока;
     x2,y2     ─ координаты 2─ой точки;
     x,y       ─ начальная точка блока─результата.

     Координаты  диагонали  блока  определяют   его   размеры,   а 
последовательность, в которой они заданы, ─направление  пересылки. 
Правильное задание направления пересылки крайне существенно,  если 
исходный блок и результат пересылки пересекаются.

     Примеры:


	  (X,Y)
	    ┌────────────┐
	    │		 │
	    │		 │(X1,Y1)
	    │ результат  ├──────────┐  \ направление пересылки
	    │ пересылки  │	    │
	    │		 │ исходный │
	    │		 │ блок     │
	    └──────────┬─┘	    │
		       │	    │
		       │	    │
		       └────────────┘
				 (X2,Y2)


				     (X2,Y2)
			┌───────────────┐
	 ┌──────────────┴┐		│
	 │		 │  исходный	│    / направление
	 │   результат	 │  блок	│      пересылки
	 │   пересылки	 │		│
	 │		 ├──────────────┘
	 └───────────────┘(X1,Y1)
       (X,Y)


          16. Файловая подсистема
							  13.09.90

     Файловая подсистема предназначен  для  обеспечения  процессов 
средствами файлового доступа, а также  для  анализа  и  управления 
работой системы с помощью клавиатуры. Файловая подсистема содержит 
следующие процессы:

File_Server    ─ эмулятор  стандартных	запросов  ОС  типа  RT─11,
                 обеспечивающих   операции    с    каталогами    и 
                 вводевывод;

File_Manager   ─ эмулятор дополнительных сервисных запросов,  поз─
                 воляющих  обеспечить  пользовательские   процессы 
                 единым  интерфейсом   при   работе   с   внешними 
                 накопителями дискового типа;

File_Comander  ─ командный интерфейс,  с  помощью  которого  можно
                 выполнять операции с файлами, процессами и т.д.

     Файловый модуль размещается в файле Fil.Prc.   Дополнительная
информация,  связанная  с  определением  используемых   регистров, 
макрокоманды дополнительных сервисных запросов и т.д. содержится в 
файле Filmac.mac.

     Процесс File_Server управляется посредством одного регистра:

FilCSR	  ═ 174060	 ; регистр управления

     Все  запросы  к  данному  процессу  имеют  (в  конце  концов) 
следующий вид:

     mov  #adr,     @#FilCSR  ;записать адрес блока запроса
     ...
adr: .Blkw     X	      ;память для блока запроса

     Процесс File_Manager обрабатывает (обслуживает) два регистра:

FMCSR	  ═ 174062	 ; регистр управления
FMKCSR	  ═ 174064	 ; регистр для ввода с клавиатуры

     Все запросы к данному процессу имеют вид, аналогичный  работе 
с регистром FilCSR.

     Процесс File_Comander обслуживает один регистр:

FCBUF	  ═ 174066	 ; регистр для ввода с клавиатуры

     Программные запросы к данному процессу отсутствуют, поскольку 
процесс управляется с клавиатуры.

	  16.1. Работа с процессом File_Server

     Для  работы  с  File_Server  в  текст   программы	 (процесса
пользователя)  необходимо  включить  файл  Filmac.mac  и   вызвать
макрокоманду .FILES, например:

	  ...
	  .include  "Filmac.mac"
	  ...
	  .FILES
	  ...

Макрокоманда  .FILES  обеспечивает  эмуляцию  стандартных   макро─
запросов ОС типа RT─11 и выполняет следующие функции:
     ─ статически инициализирует вектор инструкции EMT;
     ─ содержит  подпрограмму,	обрабатывающую	EMT─инструкции	 и
       "транслирующую" их процессу File_Server.

     Обеспечивается возможность использовать следующие стандартные 
системные макрокоманды ОС типа RT─11:

.Close	  Chan
            ─ закрывает канал и освобождает  его  для  использова─ 
              ния в других операциях

.Cstat	  Area,Chan,Addr
            ─ позволяет получить информацию о  состоянии  опереде─ 
              ленного канала

.Delete   Area,Chan,Dblk
	(*) ─ удаляет файл на указанном устройстве

.Enter	  Area,Chan,Dblk,Len
	(*) ─ резервирует  область  на	указанном  устройстве  для
              создания нового файла

.Exit
            ─ завершает процесс пользователя (текущий процесс)

.Lookup   Area,Chan,Dblk
	(*) ─ открывает существующий файл для ввода иеили вывода

.Print	  Addr
            ─ выводит текстовую строку в окно эмулятора текстового 
	      дисплея типа VT─100

.Purge	  Chan
            ─ освобождает указанный канал  (для  последующего  ис─ 
              пользования)

.Readw	  Area,Chan,Buf,Wcnt,Blk
            ─ считывает данные по указанному каналу  с  устройства 
              (файла)  в  буфер  памяти  и  возвращает  управление 
              процессу после окончания операции

.Rename   Area,Chan,Dblk
	(*) ─ выполняет переименование файла

.Spfun	  Area,Chan,Func,Buf,Wcnt,Blk
            ─ выполняет  специальные  функции  для  устройств  (по 
              указанному каналу)

.Wait	  Chan
            ─ ожидает завершения операций вводаевывода по  указан─ 
              ному каналу;  обычно  используется  для  определения 
              свободен или занят канал

.Writw	  Area,Chan,Buf,Wcnt,Blk
            ─ записывает данные по  указанному  каналу  из  буфера 
              памяти на устройство (файл)

(*)  помечены запросы, имеющие особенности при их использовании по
сравнению  с  ОС;  существо  проблемы  заключается  в   том,   что 
File_Server имеет единое поле "логических  каналов",  используемых
несколькими  пользовательскими   процессами;   каналы   выделяются 
(распределяются)  процессам  динамически  (по   мере   поступления 
запросов);   поэтому   в   отмеченных	запросах   аргумент   Chan
игнорируется; после выполнения запроса,  если  он  выполнился  без 
ошибки, то в байте с адресом 52 (куда обычно заносится  уточняющий 
код ошибки) будет находится  номер  канала,  выделенный  процессом 
File_Server; именно этот номер и следует указывать  в  последующих
запросах  вводаевывода;  номер  канала  возвращается  только   для 
запросов .Lookup  и  .Enter;  для  остальных  отмеченных  запросов
возвращать  номер  канала  не  имеет   смысла,   поскольку   канал 
используется только для выполнения собственно запроса, и после его 
использования освобождается.

     В стандартной ОС имеется три модификации  операций  "чтения", 
"записи" и "специальная функция". Все три модификации (с ожиданием 
завершения,  без  ожидания  завершения,  с  вызовом   подпрограммы 
завершения) обрабатываются процессом File_Server  одинаково  ─	"с
ожиданием", т.е. синхронно.

	  15.2. Работа с процессом File_Manager

     Для использования процесса в текст программы следует включить 
файл определений Filmac.mac. В этом файле  содержатся  определения
для запросов, обрабатываемых процессом File_Manager.

     Обращение  к  процессу  выполняется   путем   записи   адреса 
управляющего  блока  в	 регистр   FMCSR   (обслуживаемый   данным
процессом).  Управляющий  блок  должен  размещаться   в   адресном 
пространстве  процесса,  который   выполняет   обращение.   Размер 
управляющего блока зависит от типа запроса.

     В  первом  слове  управляющего  блока  перед   обращением   к 
File_Manager находится код запроса.

     Если в макрокоманде  аргумент  пропущен,  то  соответствующая 
ячейка в таблице ADR макрокомандой изменяться не будет.

     Макрокоманды "портят" регистр r0:	после  запроса	r0  всегда
содержит адрес начала таблицы area, т.е. адрес ячейки,	в  которой
размещается код запроса.

     Назначить   логическое   имя   физическому   устройству   или 
логическому диску (код запроса 0):

FilMou	  Adr,Ldev,Pdev,Sblk,Leng,FIL,NAM,TYP
      ┌────────┐
Adr ─┤│   0    │ ─код запроса
      ├────────┤
      │  Ldev  │ ─логическое имя в коде RADIX─50
      ├────────┤
      │  Pdev  │ ─физическое имя и номер устройства в коде RADIX─50
      ├────────┤
      │  Sblk  │
      ├────────┤
      │  Leng  │
      ├────────┤
      │        │ ─ не используется
      ├────────┤─┐
      │  FIL   │ │
      ├────────┤ │  имя и тип файла, который является логическим
      │  NAM   │ ├─┤диском; для случая назначения логического
      ├────────┤ │  имени данные слова таблицы не используются
      │  TYP   │ │
      └────────┘─┘

LDEV	  ─ логическое имя, которое  будет  назначено  физическому
	    устройству или логическому диску, в коде RADIX─50

PDEV	  ─ физическое имя  и  номер  устройства,  которому  будет
            назначено логическое  имя  или  на  котором  находится 
	    логический диск, в коде RADIX─50

SBLK	  ─ номер блока (на  физическом  устройстве),  с  которого
            размещается логический диск, или 0,  если  физическому 
            устройству назначается логическое имя

LENG	  ─  размер  логического  диска  в  блоках,  или  0,  если
            физическому устройству назначается логическое имя

FIL,NAM,TYP ─ имя и тип файла, который является логическим диском

Если запрос не будет выполнен из─за обнаруженных ошибок, то первое 
слово управляющего блока будет содержать отрицательный код:

     ─1   ─ не задано физическое имя и номер устройства
     ─2   ─ указанное физическое устройство отсутствует
     ─3   ─ таблица логических имен переполнена

     Просмотр  списка  соответствия  логических  имен   физическим 
устройствам или логическим дискам (код запроса 2):

FilSho	  Adr
      ┌───┬────┐
Adr ─┤│***│  2 │ ─код запроса
      ├───┴────┤
      │  Ldev  │ ─логическое имя в коде RADIX─50
      ├────────┤
      │  Pdev  │ ─физическое имя и номер устройства в коде RADIX─50
      ├────────┤
      │  Sblk  │
      ├────────┤
      │  Leng  │
      ├────────┤─┐
      │  DEV   │ │
      ├────────┤ │
      │  FIL   │ │  спецификация  файла,который  является  логическим
      ├────────┤ ├─┤диском; для случая логического имени данные слова
      │  NAM   │ │  таблицы не используются
      ├────────┤ │
      │  TYP   │ │
      └────────┘─┘

     Данный запрос возвращает заполненную  таблицу.  Байт  таблицы 
(помеченный  ***)  при	первом	обращении  к  File_Manager  должен
содержать 0. После выполнения запроса этот  байт  будет  содержать 
ненулевое значение, если таблица  (adr)  заполнена  информацией  о
логическом имени или логическом диске. Если байт  содержит  0,  то 
это означает, что вся таблица логичских имен и дисков просмотрена. 
Таким образом последовательное выполнение запроса FilSho позволяет
получить все определенные логические имена и диски. Для повторного 
(но  не  самого  первого)  запросов  с   кодом   2   целесообразно 
использовать запрос FILMAN (см. ниже).

     Ввод спецификации файла с клавиатуры с возможностью просмотра 
каталогов, синтаксический контроль и формирование таблицы Dblk для
запросов типа .Lookup, .Enter и т.п. (код запроса 4):

FilCsi	  Adr,Errst,Prost,Retst,Dext
      ┌────────┐
Adr ─┤│   4    │ ─код запроса
      ├────────┤
      │ Errst  │ ─адрес строки "сообщение об ошибке"
      ├────────┤
      │ Prost  │ ─адрес строки "подсказка"
      ├────────┤
      │ Retst  │
      ├────────┤
      │ Dext   │ ─ тип файла по умолчанию в коде RADIX─50
      ├────────┤─┐
      │  DEV   │ │
      ├────────┤ │
      │  FIL   │ │
      ├────────┤ ├─┤возвращаемая спецификация файла в коде RADIX─50
      │  NAM   │ │
      ├────────┤ │
      │  TYP   │ │
      └────────┘─┘

ERRST	  ─ адрес текстовой строки, выдаваемой в качестве  ошибки;
            аргумент должен быть 0, если  не  нужно  сообщение  об 
            ошибке;

PROST	  ─ адрес текстовой строки, выдаваемой в качестве подсказ─
            ки; аргумент должен быть 0, если подсказка не нужна;

RETST	  ─ адрес буфера, в который будет помещена копия введенной
            строки; аргумент должен быть 0, если копия не нужна;

DEXT	  ─ тип файла  по  умолчанию  в  коде  RADIX─50;  аргумент
            должен быть 0, если не нужно использовать тип файла по 
            умолчанию;

Если при вводе  спецификации  устройство  не  указывается,  то  по 
умолчанию будет использоваться логическое имя "DK".

При выполнении запроса создается следующее окно:

       MXCLEN ═ 26. ;ширина окна в символах

    ┌──────────────────────────┐
    │			       │├──┤строка для вывода ошибок и
    ├──────────────────────────┤    подсказок
    │			       │├──┤"диалоговая" строка для ввода
    └──────────────────────────┘


Последовательность выполнения запроса:

     а) если задан адрес строки ошибки (ERRST), то  в  окно  будет
        выведено сообщение об ошибке;  нажатие  на  любую  клавишу 
        приведет продолжению работы;

     б) если задан адрес строки подсказки (PROST), то в окно будет
        выведена подсказка;

     в) ввод и редактирование  строки  (спецификации  файла);  для 
	редактирования	могут  использоваться  клавиши	→,   ←	 и
	"ЗАБОЙ";  завершение  ввода  строки  ─	по  клавише  "ВК";
	нажатие на клавишу "АР2" ─ прерывает работу  и	возвращает
        управление пользовательскому процессу:  поле  спецификации 
        файла в таблице будет содержать нули;

            ═  имя и тип файла могут содержать специальные  симво─ 
	       лы: "%" ─ означает любой  символ;  "*"  ─  означает
               последовательность любых символов; если  имя  файла 
	       пропущено, то оно будет интерпретироваться как "*";
               если в имени иеили  типе  файла  имеются  указанные 
               символы, то в  дополнительном  окне  будет  выведен 
               список файлов, удовлетворяющих заданному  критерию; 
	       при этом с помощью ↓ и ↑  можно	просмотреть  имею─
               щийся список;
	    ═  нажатие клавиши "АР2" завершит просмотр без измене─
               ния редактируемой строки;
	    ═  нажатие клавиши "ВК" завершит просмотр и  скопирует
               имя и тип выбранного файла;
            ═  после этого можно продолжить редактирование строки.

     г) после  завершения  ввода  строки  производится  анализ  на 
        ошибки (чисто синтаксические); если ошибка обнаружена,  то 
        выводится сообщение "Синтаксическая  ошибка";  нажатие  на 
        любую клавишу приведет к продолжению работы с пункта б);

     д) если  ошибок  нет,  то  пользовательскому  процессу  будет 
	передана спецификация файла в коде RADIX─50  (в  таблицу),
        и, если  задан  адрес  буфера,  то  будет  передана  копия 
        введенной строки.

     Ввод спецификации файла с клавиатуры, синтаксический контроль 
и формирование таблицы Видл для запросов типа  .Lookup,  .Enter  и
т.п. (код запроса 10):

FilSpc	  Adr,Errst,Prost,Retst,Dext
      ┌────────┐
Adr ─┤│  10    │ ─код запроса
      ├────────┤
      │ Errst  │ ─адрес строки "сообщение об ошибке"
      ├────────┤
      │ Prost  │ ─адрес строки "подсказка"
      ├────────┤
      │ Retst  │
      ├────────┤
      │ Dext   │ ─ тип файла по умолчанию в коде RADIX─50
      ├────────┤─┐
      │  DEV   │ │
      ├────────┤ │
      │  FIL   │ │
      ├────────┤ ├─┤возвращаемая спецификация файла в коде RADIX─50
      │  NAM   │ │
      ├────────┤ │
      │  TYP   │ │
      └────────┘─┘

     Данный запрос аналогичен запросу FilCsi: единственное отличие
заключается в том, что отсутствует возможность просмотра каталогов 
и недопустимо использование символов  "*"  и  "%"  в  спецификации
файла.

     Ввод спецификации файла с клавиатуры, синтаксический контроль 
и формирование таблицы Видл для запросов типа  .Lookup,  .Enter  и
т.п. (код запроса 12):

FilGtf	  Adr,Errst,Prost,Retst,Dext
      ┌────────┐
Adr ─┤│  12    │ ─код запроса
      ├────────┤
      │ Errst  │ ─адрес строки "сообщение об ошибке"
      ├────────┤
      │ Prost  │ ─адрес строки "подсказка"
      ├────────┤
      │ Retst  │
      ├────────┤
      │ Dext   │ ─ тип файла по умолчанию в коде RADIX─50
      ├────────┤─┐
      │  DEV   │ │
      ├────────┤ │
      │  FIL   │ │
      ├────────┤ ├─┤возвращаемая спецификация файла в коде RADIX─50
      │  NAM   │ │
      ├────────┤ │
      │  TYP   │ │
      └────────┘─┘

     Данный запрос аналогичен запросу FilCsi: единственное отличие
заключается  в  том,   что   отсутствует   возможность   просмотра 
каталогов. Использование символов "*" и "%" в  спецификации  файла
разрешается: они возвращаются в составе спецификации файла в  коде 
RADIX─50 и, если указано, в текстовом буфере.

     Вывод сообщений об ошибках и подсказок (код запроса 6):

FilMes	  Adr,Errst,Prost
      ┌────────┐
Adr ─┤│   6    │ ─код запроса
      ├────────┤
      │ Errst  │ ─адрес строки "сообщение об ошибке"
      ├────────┤
      │ Prost  │ ─адрес строки "подсказка"
      └────────┘

ERRST	  ─ адрес текстовой строки, выдаваемой в качестве  ошибки;
            аргумент должен быть 0, если  не  нужно  сообщение  об 
            ошибке;

PROST	  ─ адрес текстовой строки, выдаваемой в качестве подсказ─
            ки; аргумент должен быть 0, если подсказка не нужна.

Последовательность выполнения запроса:

     а) если задан адрес строки ошибки (ERRST), то  в  окно  будет
        выведено сообщение об ошибке;  нажатие  на  любую  клавишу 
        приведет продолжению работы;

     б) если задан адрес строки подсказки (PROST), то в окно будет
        выведена подсказка; нажатие на любую  клавишу  приведет  к 
        завершению выполнения запроса.

     Формирование таблицы Dblk из текстовой строки ─  спецификации
файла (код запроса 8):

FilR50	  Adr,Ascst,Dext
      ┌────────┐
Adr ─┤│   8    │ ─код запроса
      ├────────┤
      │ Ascst  │ ─адрес строки, содержащей спецификацию файла
      ├────────┤
      │        │ ─не используется
      ├────────┤
      │        │ ─не используется
      ├────────┤
      │ Dext   │ ─ тип файла по умолчанию в коде RADIX─50
      ├────────┤─┐
      │  DEV   │ │
      ├────────┤ │
      │  FIL   │ │
      ├────────┤ ├─┤возвращаемая спецификация файла в коде RADIX─50
      │  NAM   │ │
      ├────────┤ │
      │  TYP   │ │
      └────────┘─┘

ASCST	  ─ адрес текстовой строки, содержащей спецификацию  файла
	    в формате .asciz.

     Запрос к процессу File_Manager:

FILMAN	  Adr

     Данный запрос  пересылает	в  регистр  процесса  File_Manager
адрес таблицы. Макрокоманда данного запроса имеет следующий вид:

     .macro    FILMAN	 adr
	       mov  adr, @#FMCSR
	       nop
     .endm     FILMAN

	  16.3. Работа с процессом File_Comander

     Процесс активируется при нажатии комбинации клавиш УПР+СБРОС. 
При этом на экране высвечивается следующее меню:
  ┌────────────────────────────┐
  │Ваше меню		       │	Отказ от меню выполняется
  │Программируемые клавиши     │	по клавиши АР2.
  │Загрузить МЕНЮ и КЛАВИШИ    │
  │Карта памяти системы        │ Перемещение по меню выполняется  с
  │Работа с процессами	       │ помощью ↓ и ↑	;  нажатие  клавиши
  │Работа с файлами	       │ "ВК"  выполнит  выбранный  элемент
  │Назначить логическое имя    │ меню.
  │Смонтировать логический диск│
  │Отменить логическое имяедиск│
  └────────────────────────────┘

a) "Ваше меню"
─  пункт  высвечивает  "пользовательское"   меню,   предварительно 
считанное из файла FILMEN.MEN;	размер	данного  текстового  файла
должен быть 1 блок (т.е. не превышать  512  байт);  файл  содержит 
последовательность  описаний  пунктов  меню;  каждый  пункт   меню 
описывается следующим образом:

     строка─заголовок
     строка─команда─1
     строка─команда─2
     ...
─ первая строка будет использоваться в  качестве  пункта  меню  (и 
будет полностью высвечиваться в  окне);  далее  следуют  командные 
строки   (одна   или   несколько);    командная    строка    будет 
выдаваться по запросу RESPON и имеет  следующий формат:
    ┌────────┐
    │YZстрока│
    └────────┘
     ││──┬───
     ││  └ выдаваемая строка
     ││
     │└───── (пробел) ─ остаться в режиме меню
     └────── >	      ─ выйти из режима меню
	     <	      ─ разрешить "клавиатурны ввод"
	     ^	      ─ преобразовать следующий символ в управляющий

─ пользовательское меню можно активировать независимо,  с  помощью 
комбинации клавиш "SHIFT"+"CR";

─ пример файла FILMEN.MEN:

	  Assign HD DK
	  ) as hd dk
	  Macro FIL
	  ) mac fil
	  Macro COM
	  ) mac com
	  Macro MEN
	  ) mac men
	  Link Fil.Prc
	  ) lin fil/map/pro
	  ) men,com//
	  (>prun fil
	  Clean dk:
	  ) del *.bak/noq
	  )>sq dk:/noq

б) "Программируемые клавиши"
─ пункт высвечивает функциональные клавиши в виде меню (назначение 
функциональных клавиш  считывается  из	файла  FILKEY.KEY;  размер
данного текстового файла должен быть 1 блок, т.е. не превышать 512 
байт);

─  функциональными  клавишами  являются  К1─К5;  эти  же  клавиши, 
нажимаемые  одновременно  с  клавишей  "SHIFT",  обозначаются  как
К6─К10;

─ файл содержит последовательность описаний функциональных  клавиш 
К1─К10 и имеет формат, аналогичный файлу  пользовательского  меню; 
каждая функциональная клавиша описывается следующим образом:

     строка─заголовок
     строка─команда─1
     строка─команда─2
     ...

─ первая строка будет использоваться в  качестве  пункта  меню  (и 
будет полностью высвечиваться в  окне);  далее  следуют  командные 
строки (одна или несколько); командные строки будут  собираться  в 
единую строку для программирования соответствующей  функциональной 
клавиши  по  запросу  KSTRIN;  командная  строка  имеет  следующий
формат:

    ┌────────┐
    │YZстрока│
    └────────┘
     ││──┬───
     ││  │
     ││  └── строка для программирования
     │└───── (пробел) ─ остаться в режиме меню
     │	     >	      ─ выйти из режима меню
     └────── ) строка с символом <CR>
	     ( строка без символа <CR>

─ в командных строках особым образом интерпретируется символ  "^":
последовательность "^^" преобразуется в "^", а	последовательность
"^x" (где x ─ буква) ─ преобразуется в соответствующий управляющий
код (в диапазоне 0─37);

─ список функциональных клавиш можно высветить независимо,  с  помощью 
комбинации клавиш "SHIFT"+"DEL";

─ пример файла FILKEY.KEY:

	       K1  ─ Abort
	       ( ^С
	       K2  ─ Abort !!!
	       ( ^С^С
	       K3  ─ Line feed
	       ( ^J
	       K4  ─ Pause tt:
	       ( ^S
	       K5  ─ Continue tt:
	       ( ^Q
	       K6  ─ Карта памяти
	       ) map
	       K7  ─ Список процессов
	       ) ps
	       K8  ─ Убить процесс
	       (>kill
	       K9  ─ Новые файлы
	       )>dir/new
	       K10 ─ Защищенные файлы
	       )>dir/pro

в) "Загрузить МЕНЮ и КЛАВИШИ:
─ при выборе данного  пункта  происходит  перезагрузка  (повторное 
считывание) файлов FILMEN.MEN и FILKEY.KEY; при запуске  файлового
модуля данные файлы считываются  на  фазе  инициализации;  если  в 
процессе работе  изменились  один  или  оба  файла,  то  их  можно 
перегрузить, не перезапуская процесс файлового модуля.

г) "Карта памяти системы"
─ при выборе данного пункта в окне высвечивается  системная  карта 
памяти.

д) "Работа с процессами"
─ при выборе данного пункта в окне высвечивается список процессов; 
для каждого процесса  высвечивается  его  номер,  имя,  приоритет, 
используемая память  (noMAP  ─	означает,  что	процесс  не  имеет
собственной памяти), а также использованное время процессора;

─ для выбранного процесса можно выполнить следующие операции:

     ПОМ  ─ высветит карту памяти процесса;
     ИСП  ─ удалит процесс.

е) "Работа с файлами"
─ при выборе данного пункта высвечивается окно с запросом:

	 ┌──────────────────────────┐
	 │  Физическое устройство : │
	 │			    │
	 └──────────────────────────┘

─ в ответ необходимо набрать спецификацию устройства или групповую 
спецификацию файлов (содержащую символы "*" и  "%");  если  задать
только  устройство,   то   высветится   полный   каталог   файлов, 
размещенных   на   этом   устройстве;   если   задать    групповую 
спецификацию, то  будет  выведен  список  файлов,  удовлетворяющей 
заданной спецификации;

─ отказаться от представленного  выше  запроса  можно  по  клавише 
"АР2";

─ высветить меню с возвожными командами можно по клавише "ПОМ":

─ если в окне высвечен список файлов, то можно выполнять следующие 
операции (нажатием на соответствующую клавишу):
     K1   ─ установитьеснять защиту файла
     K2   ─ переместить файл
     K3   ─ скопировать файл
     K4   ─ удалить файл (защищенный файл не удаляется)
     K5   ─ переименовать файл
     "BK" ─ "выполнить" файл
     <.>  ─ пометить файл

     "выполнить" файл означает следующее (для указанного типа):
     .DSK ─ файл логического диска ─ посмотреть  каталог  логичес─
            кого диска
     .COM ─ командный  файл  ─	 запустить   командный	 файл	на
            выполнение под управлением дисковой ОС
     .PRC ─ файл  процесса  ─  запустить  процесс  на	выполнение
	    (аналогично будет обработан файл типа .SAV)

     "помеченный(ые)"  файлы   выделяются   в   меню   специальным 
     маркером; данная операция является "триггерной";
     если имеются "помеченные" файлы то операции по  клавишам  K1,
     K2, K3 и K4 будут выполнены со всеми помеченными файлами.

ж) "Назначить логическое имя"
─ по данному  пункту  меню  выполняется  присваивание  логического 
имени физическому устройству;

─  при  выборе  данного  пункта  высвечивается  окно  со   списком 
имеющихся логических назначений, а также окно с запросом:
	 ┌──────────────────────────┐
	 │Логическое имя устройства:│
	 │			    │
	 └──────────────────────────┘
─ в ответ необходимо набрать логическое имя (1─3 символа) и "ВК";

─ после этого появится запрос:
	 ┌──────────────────────────┐
	 │  Физическое устройство:  │
	 │			    │
	 └──────────────────────────┘

─ в ответ необходимо набрать  физическое  устройство  (имя  ─  два 
символа, и, если необходимо, номер устройства);


─ после этого повторится запрос логического имени;

─ выход из режима задания логических имен по клавише "АР2".

з) "Смонтировать логический диск"
─ по данному  пункту  меню  выполняется  присваивание  логического 
имени логическому диску (тип файла .DSK);

─  при  выборе  данного  пункта  высвечивается  окно  со   списком 
имеющихся логических назначений, а также окно с запросом:
	 ┌──────────────────────────┐
	 │Логическое имя устройства:│
	 │			    │
	 └──────────────────────────┘
─ в ответ необходимо набрать логическое имя (1─3 символа) и "ВК";

─ после этого появится запрос:
	 ┌──────────────────────────┐
	 │ Файл логического диска : │
	 │			    │
	 └──────────────────────────┘

─  в  ответ  необходимо  набрать  спецификацию  файла  логического 
диска; это запрос выполняется с помощью  FilCsi  ─  поэтому  можно
использовать возможность просмотра каталога и т.д.

─ после этого повторится запрос логического имени;

─ выход из режима задания имен логическим устройствам  по  клавише 
"АР2".

и) "Отменить логическое имя/диск"

─  по  данному  пункту  меню   выполняется   удаление   логических 
имен, присвоенных с помощью предыдущих двух операций;

─  при  выборе  данного  пункта  высвечивается  окно  со   списком 
имеющихся логических назначений; верхняя строка окна  используется 
в качестве заголовка; перемещая с помощью ↓ и  ↑  выделенное  имя,
нажатием на "ВК" оно удаляется;

─ пример окна со списком логических назначений:

	 ┌──────────────────────┐
	 │log─>phy:filnam.typ	│ ─ строка заголовка
	 │A  ─>fd :		│
	 │B  ─>hd7:		│
	 │ld3─>hd3:demo  .dsk	│
	 │C  ─>hd2:		│
	 │EE ─>Hd7:system.dsk	│
	 └──────────────────────┘
